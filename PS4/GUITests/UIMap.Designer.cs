// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace GUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Enters "Hello World" into cell A1.
        /// </summary>
        public void TestHelloWorld()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            #endregion

            // Launch ../../../SpreadsheetGUI/bin/Debug/SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.TestHelloWorldParams.UISpreadsheetWindowExePath, this.TestHelloWorldParams.UISpreadsheetWindowAlternateExePath);

            // Type 'Hello World' in 'cellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.TestHelloWorldParams.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'cellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.TestHelloWorldParams.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(60, 70));
        }
        
        /// <summary>
        /// Make sure the contents and value were properly put into spreadsheet.
        /// </summary>
        public void AssertHelloWorld()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsTextBox' text box equals 'Hello World'
            Assert.AreEqual(this.AssertHelloWorldExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text);

            // Verify that the 'Text' property of 'cellValueTextBox' text box equals 'Hello World'
            Assert.AreEqual(this.AssertHelloWorldExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text);
        }
        
        /// <summary>
        /// Erases the "Hello World" contents.
        /// </summary>
        public void EraseHelloWorld()
        {
            #region Variable Declarations
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(80, 73));

            // Move list box
            Mouse.StartDragging(uIItemList, new Point(684, 222));
            Mouse.StopDragging(uIItemList, -263, 55);

            // Type '' in 'cellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.EraseHelloWorldParams.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'cellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.EraseHelloWorldParams.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(54, 71));
        }
        
        /// <summary>
        /// Make sure contents are actually erased.
        /// </summary>
        public void AssertHelloWorldErased()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsTextBox' text box equals ''
            Assert.AreEqual(this.AssertHelloWorldErasedExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text);

            // Verify that the 'Text' property of 'cellValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertHelloWorldErasedExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text);
        }
        
        /// <summary>
        /// Enters and invalid formula.
        /// </summary>
        public void EnterInvalidFormula()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(218, 81));

            // Type '=D2' in 'cellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.EnterInvalidFormulaParams.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'cellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.EnterInvalidFormulaParams.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(216, 85));
        }
        
        /// <summary>
        /// Make sure we have a formula error.
        /// </summary>
        public void AssertInvalidFormula()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsTextBox' text box equals '=D2'
            Assert.AreEqual(this.AssertInvalidFormulaExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text);

            // Verify that the 'Text' property of 'cellValueTextBox' text box equals 'Variable D2 not found.'
            Assert.AreEqual(this.AssertInvalidFormulaExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text);
        }
        
        /// <summary>
        /// Modifies the invalid formula to work.
        /// </summary>
        public void FixInvalidFormula()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(317, 61));

            // Type '3' in 'cellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.FixInvalidFormulaParams.UICellContentsTextBoxEditText;

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(294, 81));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(251, 82));
        }
        
        /// <summary>
        /// Make sure the formula is indeed fixed.
        /// </summary>
        public void AssertInvalidFormulaFixed()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsTextBox' text box equals '=D2'
            Assert.AreEqual(this.AssertInvalidFormulaFixedExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text);

            // Verify that the 'Text' property of 'cellValueTextBox' text box equals '3'
            Assert.AreEqual(this.AssertInvalidFormulaFixedExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text);
        }
        
        /// <summary>
        /// Makes a formula resulting in an error box being displayed.
        /// </summary>
        public void ErrorInducingFormula()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(375, 121));

            // Type '=badFormula' in 'cellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.ErrorInducingFormulaParams.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'cellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.ErrorInducingFormulaParams.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Make sure we got an error message from the bad formula.
        /// </summary>
        public void AssertErrorMessage()
        {
            #region Variable Declarations
            WinText uITokenbadFormulanormaText = this.UIInvalidFormulaWindow.UITokenbadFormulanormaWindow.UITokenbadFormulanormaText;
            #endregion

            // Verify that the 'DisplayText' property of 'Token badFormula (normalized: BADFORMULA ) is not ...' label equals 'Token badFormula (normalized: BADFORMULA ) is not valid.'
            Assert.AreEqual(this.AssertErrorMessageExpectedValues.UITokenbadFormulanormaTextDisplayText, uITokenbadFormulanormaText.DisplayText);
        }
        
        /// <summary>
        /// Fixes the formula that caused a message box error.
        /// </summary>
        public void FixErrorInducingFormula()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(955, 392));

            // Type 'I work now.' in 'cellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.FixErrorInducingFormulaParams.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'cellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.FixErrorInducingFormulaParams.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(390, 124));
        }
        
        /// <summary>
        /// Make sure the error-inducing formula is now fixed.
        /// </summary>
        public void AssertErrorFixed()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsTextBox' text box equals 'I work now.'
            Assert.AreEqual(this.AssertErrorFixedExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text);

            // Verify that the 'Text' property of 'cellValueTextBox' text box equals 'I work now.'
            Assert.AreEqual(this.AssertErrorFixedExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text);
        }
        
        #region Properties
        public virtual TestHelloWorldParams TestHelloWorldParams
        {
            get
            {
                if ((this.mTestHelloWorldParams == null))
                {
                    this.mTestHelloWorldParams = new TestHelloWorldParams();
                }
                return this.mTestHelloWorldParams;
            }
        }
        
        public virtual AssertHelloWorldExpectedValues AssertHelloWorldExpectedValues
        {
            get
            {
                if ((this.mAssertHelloWorldExpectedValues == null))
                {
                    this.mAssertHelloWorldExpectedValues = new AssertHelloWorldExpectedValues();
                }
                return this.mAssertHelloWorldExpectedValues;
            }
        }
        
        public virtual EraseHelloWorldParams EraseHelloWorldParams
        {
            get
            {
                if ((this.mEraseHelloWorldParams == null))
                {
                    this.mEraseHelloWorldParams = new EraseHelloWorldParams();
                }
                return this.mEraseHelloWorldParams;
            }
        }
        
        public virtual AssertHelloWorldErasedExpectedValues AssertHelloWorldErasedExpectedValues
        {
            get
            {
                if ((this.mAssertHelloWorldErasedExpectedValues == null))
                {
                    this.mAssertHelloWorldErasedExpectedValues = new AssertHelloWorldErasedExpectedValues();
                }
                return this.mAssertHelloWorldErasedExpectedValues;
            }
        }
        
        public virtual EnterInvalidFormulaParams EnterInvalidFormulaParams
        {
            get
            {
                if ((this.mEnterInvalidFormulaParams == null))
                {
                    this.mEnterInvalidFormulaParams = new EnterInvalidFormulaParams();
                }
                return this.mEnterInvalidFormulaParams;
            }
        }
        
        public virtual AssertInvalidFormulaExpectedValues AssertInvalidFormulaExpectedValues
        {
            get
            {
                if ((this.mAssertInvalidFormulaExpectedValues == null))
                {
                    this.mAssertInvalidFormulaExpectedValues = new AssertInvalidFormulaExpectedValues();
                }
                return this.mAssertInvalidFormulaExpectedValues;
            }
        }
        
        public virtual FixInvalidFormulaParams FixInvalidFormulaParams
        {
            get
            {
                if ((this.mFixInvalidFormulaParams == null))
                {
                    this.mFixInvalidFormulaParams = new FixInvalidFormulaParams();
                }
                return this.mFixInvalidFormulaParams;
            }
        }
        
        public virtual AssertInvalidFormulaFixedExpectedValues AssertInvalidFormulaFixedExpectedValues
        {
            get
            {
                if ((this.mAssertInvalidFormulaFixedExpectedValues == null))
                {
                    this.mAssertInvalidFormulaFixedExpectedValues = new AssertInvalidFormulaFixedExpectedValues();
                }
                return this.mAssertInvalidFormulaFixedExpectedValues;
            }
        }
        
        public virtual ErrorInducingFormulaParams ErrorInducingFormulaParams
        {
            get
            {
                if ((this.mErrorInducingFormulaParams == null))
                {
                    this.mErrorInducingFormulaParams = new ErrorInducingFormulaParams();
                }
                return this.mErrorInducingFormulaParams;
            }
        }
        
        public virtual AssertErrorMessageExpectedValues AssertErrorMessageExpectedValues
        {
            get
            {
                if ((this.mAssertErrorMessageExpectedValues == null))
                {
                    this.mAssertErrorMessageExpectedValues = new AssertErrorMessageExpectedValues();
                }
                return this.mAssertErrorMessageExpectedValues;
            }
        }
        
        public virtual FixErrorInducingFormulaParams FixErrorInducingFormulaParams
        {
            get
            {
                if ((this.mFixErrorInducingFormulaParams == null))
                {
                    this.mFixErrorInducingFormulaParams = new FixErrorInducingFormulaParams();
                }
                return this.mFixErrorInducingFormulaParams;
            }
        }
        
        public virtual AssertErrorFixedExpectedValues AssertErrorFixedExpectedValues
        {
            get
            {
                if ((this.mAssertErrorFixedExpectedValues == null))
                {
                    this.mAssertErrorFixedExpectedValues = new AssertErrorFixedExpectedValues();
                }
                return this.mAssertErrorFixedExpectedValues;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIInvalidFormulaWindow UIInvalidFormulaWindow
        {
            get
            {
                if ((this.mUIInvalidFormulaWindow == null))
                {
                    this.mUIInvalidFormulaWindow = new UIInvalidFormulaWindow();
                }
                return this.mUIInvalidFormulaWindow;
            }
        }
        #endregion
        
        #region Fields
        private TestHelloWorldParams mTestHelloWorldParams;
        
        private AssertHelloWorldExpectedValues mAssertHelloWorldExpectedValues;
        
        private EraseHelloWorldParams mEraseHelloWorldParams;
        
        private AssertHelloWorldErasedExpectedValues mAssertHelloWorldErasedExpectedValues;
        
        private EnterInvalidFormulaParams mEnterInvalidFormulaParams;
        
        private AssertInvalidFormulaExpectedValues mAssertInvalidFormulaExpectedValues;
        
        private FixInvalidFormulaParams mFixInvalidFormulaParams;
        
        private AssertInvalidFormulaFixedExpectedValues mAssertInvalidFormulaFixedExpectedValues;
        
        private ErrorInducingFormulaParams mErrorInducingFormulaParams;
        
        private AssertErrorMessageExpectedValues mAssertErrorMessageExpectedValues;
        
        private FixErrorInducingFormulaParams mFixErrorInducingFormulaParams;
        
        private AssertErrorFixedExpectedValues mAssertErrorFixedExpectedValues;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIInvalidFormulaWindow mUIInvalidFormulaWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestHelloWorld'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestHelloWorldParams
    {

        #region Fields
        /// <summary>
        /// Launch '../../../SpreadsheetGUI/bin/Debug/SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "../../../SpreadsheetGUI/bin/Debug/" +
            "SpreadsheetGUI.exe";

        /// <summary>
        /// Launch '../../../SpreadsheetGUI/bin/Debug/SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "../../../SpreadsheetGUI/bin/Debug/" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'Hello World' in 'cellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "Hello World";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertHelloWorld'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertHelloWorldExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsTextBox' text box equals 'Hello World'
        /// </summary>
        public string UICellContentsTextBoxEditText = "Hello World";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueTextBox' text box equals 'Hello World'
        /// </summary>
        public string UICellValueTextBoxEditText = "Hello World";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EraseHelloWorld'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EraseHelloWorldParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'cellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertHelloWorldErased'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertHelloWorldErasedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsTextBox' text box equals ''
        /// </summary>
        public string UICellContentsTextBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueTextBox' text box equals ''
        /// </summary>
        public string UICellValueTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterInvalidFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EnterInvalidFormulaParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=D2' in 'cellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "=D2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertInvalidFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertInvalidFormulaExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsTextBox' text box equals '=D2'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=D2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueTextBox' text box equals 'Variable D2 not found.'
        /// </summary>
        public string UICellValueTextBoxEditText = "Variable D2 not found.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FixInvalidFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FixInvalidFormulaParams
    {
        
        #region Fields
        /// <summary>
        /// Type '3' in 'cellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertInvalidFormulaFixed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertInvalidFormulaFixedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsTextBox' text box equals '=D2'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=D2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueTextBox' text box equals '3'
        /// </summary>
        public string UICellValueTextBoxEditText = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ErrorInducingFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorInducingFormulaParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=badFormula' in 'cellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "=badFormula";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertErrorMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertErrorMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Token badFormula (normalized: BADFORMULA ) is not ...' label equals 'Token badFormula (normalized: BADFORMULA ) is not valid.'
        /// </summary>
        public string UITokenbadFormulanormaTextDisplayText = "Token badFormula (normalized: BADFORMULA ) is not valid.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FixErrorInducingFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FixErrorInducingFormulaParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'I work now.' in 'cellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "I work now.";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertErrorFixed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertErrorFixedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsTextBox' text box equals 'I work now.'
        /// </summary>
        public string UICellContentsTextBoxEditText = "I work now.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueTextBox' text box equals 'I work now.'
        /// </summary>
        public string UICellValueTextBoxEditText = "I work now.";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UICellContentsTextBoxWindow UICellContentsTextBoxWindow
        {
            get
            {
                if ((this.mUICellContentsTextBoxWindow == null))
                {
                    this.mUICellContentsTextBoxWindow = new UICellContentsTextBoxWindow(this);
                }
                return this.mUICellContentsTextBoxWindow;
            }
        }
        
        public UISpreadsheetClient UISpreadsheetClient
        {
            get
            {
                if ((this.mUISpreadsheetClient == null))
                {
                    this.mUISpreadsheetClient = new UISpreadsheetClient(this);
                }
                return this.mUISpreadsheetClient;
            }
        }
        
        public UICellValueTextBoxWindow UICellValueTextBoxWindow
        {
            get
            {
                if ((this.mUICellValueTextBoxWindow == null))
                {
                    this.mUICellValueTextBoxWindow = new UICellValueTextBoxWindow(this);
                }
                return this.mUICellValueTextBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentsTextBoxWindow mUICellContentsTextBoxWindow;
        
        private UISpreadsheetClient mUISpreadsheetClient;
        
        private UICellValueTextBoxWindow mUICellValueTextBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellContentsTextBoxWindow : WinWindow
    {
        
        public UICellContentsTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentsTextBox";
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsTextBoxEdit
        {
            get
            {
                if ((this.mUICellContentsTextBoxEdit == null))
                {
                    this.mUICellContentsTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    this.mUICellContentsTextBoxEdit.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUICellContentsTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetClient : WinClient
    {
        
        public UISpreadsheetClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Spreadsheet*";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinWindow UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIMenuStrip1Window.SearchProperties[WinWindow.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIMenuStrip1Window.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUIMenuStrip1Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIMenuStrip1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellValueTextBoxWindow : WinWindow
    {
        
        public UICellValueTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValueTextBox";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueTextBoxEdit
        {
            get
            {
                if ((this.mUICellValueTextBoxEdit == null))
                {
                    this.mUICellValueTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value:";
                    this.mUICellValueTextBoxEdit.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUICellValueTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanelClient
        {
            get
            {
                if ((this.mUISpreadsheetPanelClient == null))
                {
                    this.mUISpreadsheetPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanelClient.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUISpreadsheetPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            #endregion
        }
        
        #region Properties
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIInvalidFormulaWindow : WinWindow
    {
        
        public UIInvalidFormulaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Invalid Formula.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Invalid Formula.");
            #endregion
        }
        
        #region Properties
        public UITokenbadFormulanormaWindow UITokenbadFormulanormaWindow
        {
            get
            {
                if ((this.mUITokenbadFormulanormaWindow == null))
                {
                    this.mUITokenbadFormulanormaWindow = new UITokenbadFormulanormaWindow(this);
                }
                return this.mUITokenbadFormulanormaWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITokenbadFormulanormaWindow mUITokenbadFormulanormaWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITokenbadFormulanormaWindow : WinWindow
    {
        
        public UITokenbadFormulanormaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Invalid Formula.");
            #endregion
        }
        
        #region Properties
        public WinText UITokenbadFormulanormaText
        {
            get
            {
                if ((this.mUITokenbadFormulanormaText == null))
                {
                    this.mUITokenbadFormulanormaText = new WinText(this);
                    #region Search Criteria
                    this.mUITokenbadFormulanormaText.SearchProperties[WinText.PropertyNames.Name] = "Token badFormula (normalized: BADFORMULA ) is not valid.";
                    this.mUITokenbadFormulanormaText.WindowTitles.Add("Invalid Formula.");
                    #endregion
                }
                return this.mUITokenbadFormulanormaText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUITokenbadFormulanormaText;
        #endregion
    }
}
